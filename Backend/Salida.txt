package main
import ("fmt")
var stack[30101999]float64;
var heap[30101999]float64;
var P, H float64;
var t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t25,t26,t27,t28,t29,t30,t31,t32,t33,t34,t35,t36,t37,t38,t39,t40,t41,t42,t43,t44,t45,t46,t47,t48,t49,t50,t51,t52,t53,t54,t55,t56,t57,t58,t59,t60,t61,t62,t63,t64,t65,t66,t67,t68,t69,t70,t71,t72,t73,t74,t75,t76,t77,t78,t79,t80,t81,t82,t83,t84,t85,t86,t87,t88,t89,t90,t91,t92,t93,t94,t95,t96,t97,t98,t99,t100,t101,t102,t103,t104,t105,t106,t107,t108,t109,t110,t111,t112,t113,t114,t115,t116,t117,t118,t119,t120,t121,t122,t123,t124,t125,t126,t127,t128,t129,t130,t131,t132,t133,t134,t135,t136,t137,t138,t139,t140,t141,t142,t143 float64; 

func print_true_armc(){
fmt.Printf("%c",116);
fmt.Printf("%c",114);
fmt.Printf("%c",117);
fmt.Printf("%c",101);
}

func print_false_armc(){
fmt.Printf("%c",102);
fmt.Printf("%c",97);
fmt.Printf("%c",108);
fmt.Printf("%c",115);
fmt.Printf("%c",101);
}

func print_math_error_armc(){
fmt.Printf("%c",77);
fmt.Printf("%c",97);
fmt.Printf("%c",116);
fmt.Printf("%c",104);
fmt.Printf("%c",69);
fmt.Printf("%c",114);
fmt.Printf("%c",114);
fmt.Printf("%c",111);
fmt.Printf("%c",114);
fmt.Printf("%c",10);
}

func print_bounds_error_armc(){
fmt.Printf("%c",66);
fmt.Printf("%c",111);
fmt.Printf("%c",117);
fmt.Printf("%c",110);
fmt.Printf("%c",100);
fmt.Printf("%c",115);
fmt.Printf("%c",69);
fmt.Printf("%c",114);
fmt.Printf("%c",114);
fmt.Printf("%c",111);
fmt.Printf("%c",114);
fmt.Printf("%c",10);
}

func Print_String_armc(){
t0 = P + 1;
t1 = stack[int(t0)];
L0:
t2 = heap[int(t1)];
if(t2 != -1) {goto L1;}
goto L2;
L1:
fmt.Printf("%c",int(t2));
t1 = t1 + 1;
goto L0;
L2:
return;
}

func Potencia_armc(){
t3 = P + 3;
stack[int(t3)] = 0;
t4 = P + 4;
stack[int(t4)] = 1;
L3:
t5 = P + 3;
t6 = stack[int(t5)];
t7 = P + 2;
t8 = stack[int(t7)];
if(t6 < t8) {goto L4;}
goto L5;
L4:
t9 = P + 4;
t10 = stack[int(t9)];
t11 = P + 1;
t12 = stack[int(t11)];
t13 = t10 * t12;
t14 = P + 4;
stack[int(t14)] = t13;
t15 = P + 3;
t16 = stack[int(t15)];
t17 = t16 + 1;
t18 = P + 3;
stack[int(t18)] = t17;
goto L3;
L5:
t19 = P + 4;
t20 = stack[int(t19)];
t21 = P + 0;
stack[int(t21)] = t20;
return;
}

func Concatenar_String_armc(){
t22 = P + 1;
t23 = stack[int(t22)];
t24 = P + 3;
stack[int(t24)] = H;
L6:
t25 = heap[int(t23)];
if(t25 != -1) {goto L7;}
goto L8;
L7:
heap[int(H)] = t25;
H = H + 1;
t23 = t23 + 1;
goto L6;
L8:
t26 = P + 2;
t27 = stack[int(t26)];
L9:
t28 = heap[int(t27)];
if(t28 != -1) {goto L10;}
goto L11;
L10:
heap[int(H)] = t28;
H = H + 1;
t27 = t27 + 1;
goto L9;
L11:
heap[int(H)] = -1;
H = H + 1;
t29 = P + 3;
t30 = stack[int(t29)];
t31 = P + 0;
stack[int(t31)] = t30;
return;
}

func Elevar_String_armc(){
t32 = P + 2;
t33 = stack[int(t32)];
t34 = P + 3;
stack[int(t34)] = 0;
t35 = P + 4;
stack[int(t35)] = H;
t36 = P + 3;
t37 = stack[int(t36)];
L12:
if(t37 < t33) {goto L13;}
goto L14;
L13:
t38 = P + 1;
t39 = stack[int(t38)];
L15:
t40 = heap[int(t39)];
if(t40 != -1) {goto L16;}
goto L17;
L16:
heap[int(H)] = t40;
H = H + 1;
t39 = t39 + 1;
goto L15;
L17:
t37 = t37 + 1;
goto L12;
L14:
heap[int(H)] = -1;
H = H + 1;
t41 = P + 4;
t42 = stack[int(t41)];
t43 = P + 0;
stack[int(t43)] = t42;
return;
}

func String_Diferente_armc(){
t44 = P + 1;
t45 = stack[int(t44)];
t46 = P + 2;
t47 = stack[int(t46)];
L19:
t48 = heap[int(t45)];
t49 = heap[int(t47)];
if(t48 != t49) {goto L20;}
goto L21;
L20:
t50 = P + 0;
stack[int(t50)] = 1;
goto L18;
L21:
if(t48 == -1) {goto L22;}
goto L23;
L22:
t51 = P + 0;
stack[int(t51)] = 0;
goto L18;
L23:
t45 = t45 + 1;
t47 = t47 + 1;
goto L19;
L18:
return;
}

func String_Igual_armc(){
t52 = P + 1;
t53 = stack[int(t52)];
t54 = P + 2;
t55 = stack[int(t54)];
L25:
t56 = heap[int(t53)];
t57 = heap[int(t55)];
if(t56 == t57) {goto L26;}
goto L27;
L26:
if(t56 == -1) {goto L28;}
goto L29;
L28:
t58 = P + 0;
stack[int(t58)] = 1;
goto L24;
L29:
t53 = t53 + 1;
t55 = t55 + 1;
goto L25;
L27:
t59 = P + 0;
stack[int(t59)] = 0;
goto L24;
L24:
return;
}

func String_Mayor_armc(){
t60 = P + 1;
t61 = stack[int(t60)];
t62 = P + 3;
stack[int(t62)] = 0;
t63 = P + 3;
t64 = stack[int(t63)];
L30:
t65 = heap[int(t61)];
if(t65 != -1) {goto L31;}
goto L32;
L31:
t61 = t61 + 1;
t64 = t64 + 1;
goto L30;
L32:
t66 = P + 2;
t67 = stack[int(t66)];
t68 = P + 4;
stack[int(t68)] = 0;
t69 = P + 4;
t70 = stack[int(t69)];
L33:
t71 = heap[int(t67)];
if(t71 != -1) {goto L34;}
goto L35;
L34:
t67 = t67 + 1;
t70 = t70 + 1;
goto L33;
L35:
if(t64 > t70) {goto L37;}
goto L38;
L37:
t72 = P + 0;
stack[int(t72)] = 1;
goto L36;
L38:
t73 = P + 0;
stack[int(t73)] = 0;
goto L36;
L36:
return;
}

func String_Mayor_Igual_armc(){
t74 = P + 1;
t75 = stack[int(t74)];
t76 = P + 3;
stack[int(t76)] = 0;
t77 = P + 3;
t78 = stack[int(t77)];
L39:
t79 = heap[int(t75)];
if(t79 != -1) {goto L40;}
goto L41;
L40:
t75 = t75 + 1;
t78 = t78 + 1;
goto L39;
L41:
t80 = P + 2;
t81 = stack[int(t80)];
t82 = P + 4;
stack[int(t82)] = 0;
t83 = P + 4;
t84 = stack[int(t83)];
L42:
t85 = heap[int(t81)];
if(t85 != -1) {goto L43;}
goto L44;
L43:
t81 = t81 + 1;
t84 = t84 + 1;
goto L42;
L44:
if(t78 >= t84) {goto L46;}
goto L47;
L46:
t86 = P + 0;
stack[int(t86)] = 1;
goto L45;
L47:
t87 = P + 0;
stack[int(t87)] = 0;
goto L45;
L45:
return;
}

func String_Menor_armc(){
t88 = P + 1;
t89 = stack[int(t88)];
t90 = P + 3;
stack[int(t90)] = 0;
t91 = P + 3;
t92 = stack[int(t91)];
L48:
t93 = heap[int(t89)];
if(t93 != -1) {goto L49;}
goto L50;
L49:
t89 = t89 + 1;
t92 = t92 + 1;
goto L48;
L50:
t94 = P + 2;
t95 = stack[int(t94)];
t96 = P + 4;
stack[int(t96)] = 0;
t97 = P + 4;
t98 = stack[int(t97)];
L51:
t99 = heap[int(t95)];
if(t99 != -1) {goto L52;}
goto L53;
L52:
t95 = t95 + 1;
t98 = t98 + 1;
goto L51;
L53:
if(t92 < t98) {goto L55;}
goto L56;
L55:
t100 = P + 0;
stack[int(t100)] = 1;
goto L54;
L56:
t101 = P + 0;
stack[int(t101)] = 0;
goto L54;
L54:
return;
}

func String_Menor_Igual_armc(){
t102 = P + 1;
t103 = stack[int(t102)];
t104 = P + 3;
stack[int(t104)] = 0;
t105 = P + 3;
t106 = stack[int(t105)];
L57:
t107 = heap[int(t103)];
if(t107 != -1) {goto L58;}
goto L59;
L58:
t103 = t103 + 1;
t106 = t106 + 1;
goto L57;
L59:
t108 = P + 2;
t109 = stack[int(t108)];
t110 = P + 4;
stack[int(t110)] = 0;
t111 = P + 4;
t112 = stack[int(t111)];
L60:
t113 = heap[int(t109)];
if(t113 != -1) {goto L61;}
goto L62;
L61:
t109 = t109 + 1;
t112 = t112 + 1;
goto L60;
L62:
if(t106 <= t112) {goto L64;}
goto L65;
L64:
t114 = P + 0;
stack[int(t114)] = 1;
goto L63;
L65:
t115 = P + 0;
stack[int(t115)] = 0;
goto L63;
L63:
return;
}

func main(){
t116 = H;
heap[int(H)] = 72;
H = H + 1;
heap[int(H)] = 101;
H = H + 1;
heap[int(H)] = 121;
H = H + 1;
heap[int(H)] = 32;
H = H + 1;
heap[int(H)] = 121;
H = H + 1;
heap[int(H)] = 111;
H = H + 1;
heap[int(H)] = 117;
H = H + 1;
heap[int(H)] = -1;
H = H + 1;
t117 = H;
heap[int(H)] = 72;
H = H + 1;
heap[int(H)] = 111;
H = H + 1;
heap[int(H)] = 108;
H = H + 1;
heap[int(H)] = 97;
H = H + 1;
heap[int(H)] = -1;
H = H + 1;
t119 = P + 0;
t120 = t119 + 1;
stack[int(t120)] = t116;
t121 = t119 + 2;
stack[int(t121)] = t117;
P = P + 0;
String_Mayor_armc();
t122 = P + 0;
t118 = stack[int(t122)];
P = P - 0;
if(t118 == 1) {goto L66;}
goto L67;
L66:
print_true_armc();
goto L68;
L67:
print_false_armc();
L68:
fmt.Printf("%c",10);

t123 = H;
heap[int(H)] = 72;
H = H + 1;
heap[int(H)] = 111;
H = H + 1;
heap[int(H)] = 108;
H = H + 1;
heap[int(H)] = 97;
H = H + 1;
heap[int(H)] = -1;
H = H + 1;
t124 = H;
heap[int(H)] = 72;
H = H + 1;
heap[int(H)] = 111;
H = H + 1;
heap[int(H)] = 108;
H = H + 1;
heap[int(H)] = 97;
H = H + 1;
heap[int(H)] = -1;
H = H + 1;
t126 = P + 0;
t127 = t126 + 1;
stack[int(t127)] = t123;
t128 = t126 + 2;
stack[int(t128)] = t124;
P = P + 0;
String_Mayor_Igual_armc();
t129 = P + 0;
t125 = stack[int(t129)];
P = P - 0;
if(t125 == 1) {goto L69;}
goto L70;
L69:
print_true_armc();
goto L71;
L70:
print_false_armc();
L71:
fmt.Printf("%c",10);

t130 = H;
heap[int(H)] = 72;
H = H + 1;
heap[int(H)] = 101;
H = H + 1;
heap[int(H)] = 121;
H = H + 1;
heap[int(H)] = -1;
H = H + 1;
t131 = H;
heap[int(H)] = 72;
H = H + 1;
heap[int(H)] = 111;
H = H + 1;
heap[int(H)] = 108;
H = H + 1;
heap[int(H)] = 97;
H = H + 1;
heap[int(H)] = -1;
H = H + 1;
t133 = P + 0;
t134 = t133 + 1;
stack[int(t134)] = t130;
t135 = t133 + 2;
stack[int(t135)] = t131;
P = P + 0;
String_Menor_armc();
t136 = P + 0;
t132 = stack[int(t136)];
P = P - 0;
if(t132 == 1) {goto L72;}
goto L73;
L72:
print_true_armc();
goto L74;
L73:
print_false_armc();
L74:
fmt.Printf("%c",10);

t137 = H;
heap[int(H)] = 72;
H = H + 1;
heap[int(H)] = 101;
H = H + 1;
heap[int(H)] = 121;
H = H + 1;
heap[int(H)] = -1;
H = H + 1;
t138 = H;
heap[int(H)] = 72;
H = H + 1;
heap[int(H)] = 111;
H = H + 1;
heap[int(H)] = 108;
H = H + 1;
heap[int(H)] = 97;
H = H + 1;
heap[int(H)] = -1;
H = H + 1;
t140 = P + 0;
t141 = t140 + 1;
stack[int(t141)] = t137;
t142 = t140 + 2;
stack[int(t142)] = t138;
P = P + 0;
String_Menor_Igual_armc();
t143 = P + 0;
t139 = stack[int(t143)];
P = P - 0;
if(t139 == 1) {goto L75;}
goto L76;
L75:
print_true_armc();
goto L77;
L76:
print_false_armc();
L77:
fmt.Printf("%c",10);
}
